version: "3.7"
services:

#Laravel App
  app:
    build:
      args:
        user: maruan
        uid: 1000
      context: ./
      dockerfile: ./php/Dockerfile
    image: laravel-app
    container_name: php
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./application:/var/www
    networks:
      - mynetwork

 #Nginx Service
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8383:8383"
#      - "443:443"
    volumes:
      - ./application:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d/
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - mynetwork

 #Certbot
#  certbot:
#    container_name: certbot
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    networks:
#      - mynetwork

  #Mysl Service
  #  mysql:
  #    image: mysql:8
  #   container_name: mysql
  #    restart: unless-stopped
  #    environment:
  #      MYSQL_DATABASE: ${DB_DATABASE}
  #      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
  #      MYSQL_PASSWORD: ${DB_PASSWORD}
  #      MYSQL_USER: ${DB_USERNAME}
  #    networks:
  #      - mynetwork

  postgres:
    image: 'postgres:13.4'
    environment:
      POSTGRES_DB: tomato
      POSTGRES_USER: tomato
      POSTGRES_PASSWORD: 1234
    container_name: postgres
    restart: always
    networks:
      - mynetwork

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - mynetwork

#  redis:
#    image: redis
#    container_name: redis
#    volumes:
#      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
#    ports:
#      - "6379"
#    networks:
#      - mynetwork

  keydb:
    image: eqalpha/keydb:x86_64_v5.3.3
    container_name: keydb
    # command: keydb-server /etc/keydb/redis.conf --server-threads 2 --active-replica yes --replicaof 192.168.1.1 6379
    # command: keydb-server /etc/keydb/redis.conf --server-threads 2 --active-replica yes --replicaof 192.168.1.2 6379
    command: keydb-server /etc/keydb/redis.conf --server-threads 2
    volumes:
      - ./redis/redis.conf:/etc/keydb/redis.conf
      - ./data:/data
    ports:
      - 6380:6379
    restart: unless-stopped
    networks:
      - mynetwork

#  rabbitmq:
#    image: rabbitmq:3-management-alpine
#    container_name: rabbitmq
#    volumes:
#      - ./.docker/rabbitmq/etc/:/etc/rabbitmq/
#      - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
#      - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
#    environment:
#        RABBITMQ_ERLANG_COOKIE: eww
#        RABBITMQ_DEFAULT_USER: admin
#        RABBITMQ_DEFAULT_PASS: admin
#    ports:
#      - 5672:5672
#      - 15672:15672
#    networks:
#      - mynetwork

networks:
  mynetwork:
    driver: bridge
